
#VelocityDriver----------------------------------------------------------------

double VD_BASE_SPEED 1.0          #In m/s
double VD_MAX_ANGLULAR_SPEED 0.5  #In rev/s
double VD_MAX_ANGLULAR_LINEAR_SPEED 0.4  #In rev/s/radian

#When computing how fast to rotate so that we will be correct by the time
#we get to the destination, assume we will get there this fast
double VD_ROTATION_ASSUMED_SPEED 1.5 #In m/s

#Conversion to wheel speed commands
double VD_XY_BASIS_SCALE 50.0 #Wheel speeds required for 1 m/s movement
double VD_R_BASIS_SCALE 40.0  #Wheel speeds required for 1 rev/s movement 
        
#Max wheel speed change per frame of control
double VD_MAX_WHEEL_SPEED_CHANGE_PER_FRAME 2

#How much should we weight in the direction we will need to head for the next waypoint?
double VD_NEXT_NEXT_PROP 0.3

#If the linear and angular errors are less then this, we're done.
double VD_GOOD_ENOUGH_DIST 0.005
double VD_GOOD_ENOUGH_ANGLE 1.0 #in degrees

#How much should we correct for rotation throwing us off?
double VD_PLANNED_ANG_SPEED_CORRECTION 0.0
double VD_CURRENT_ANG_SPEED_CORRECTION 0.15

#Scaling for speed based on distance from goal
int VD_NUM_SCALE_BY_DISTANCE 22
string VD_SCALE_BY_DISTANCE_0  0.00,0.01 
string VD_SCALE_BY_DISTANCE_1  0.02,0.12 
string VD_SCALE_BY_DISTANCE_2  0.05,0.21 
string VD_SCALE_BY_DISTANCE_3  0.10,0.30 
string VD_SCALE_BY_DISTANCE_4  0.15,0.39 
string VD_SCALE_BY_DISTANCE_5  0.20,0.50 
string VD_SCALE_BY_DISTANCE_6  0.25,0.64 
string VD_SCALE_BY_DISTANCE_7  0.30,0.78
string VD_SCALE_BY_DISTANCE_8  0.35,0.93
string VD_SCALE_BY_DISTANCE_9  0.40,1.00
string VD_SCALE_BY_DISTANCE_10 0.50,1.05
string VD_SCALE_BY_DISTANCE_11 0.60,1.10
string VD_SCALE_BY_DISTANCE_12 0.70,1.15
string VD_SCALE_BY_DISTANCE_13 0.80,1.20
string VD_SCALE_BY_DISTANCE_14 0.90,1.25
string VD_SCALE_BY_DISTANCE_15 1.00,1.30
string VD_SCALE_BY_DISTANCE_16 1.10,1.35
string VD_SCALE_BY_DISTANCE_17 1.20,1.40
string VD_SCALE_BY_DISTANCE_18 1.30,1.45
string VD_SCALE_BY_DISTANCE_19 1.40,1.50
string VD_SCALE_BY_DISTANCE_20 1.60,1.60
string VD_SCALE_BY_DISTANCE_21 1.90,1.65

#Scaling for speed based on distance from obstacle
int VD_NUM_SCALE_BY_OBSTACLE_DISTANCE 19
string VD_SCALE_BY_OBSTACLE_DISTANCE_0  0.0,0.80 
string VD_SCALE_BY_OBSTACLE_DISTANCE_1  0.1,0.80 
string VD_SCALE_BY_OBSTACLE_DISTANCE_2  0.2,0.80 
string VD_SCALE_BY_OBSTACLE_DISTANCE_3  0.3,0.95
string VD_SCALE_BY_OBSTACLE_DISTANCE_4  0.4,1.00
string VD_SCALE_BY_OBSTACLE_DISTANCE_5  0.5,1.05
string VD_SCALE_BY_OBSTACLE_DISTANCE_6  0.6,1.10
string VD_SCALE_BY_OBSTACLE_DISTANCE_7  0.7,1.15
string VD_SCALE_BY_OBSTACLE_DISTANCE_8  0.8,1.20
string VD_SCALE_BY_OBSTACLE_DISTANCE_9  0.9,1.25
string VD_SCALE_BY_OBSTACLE_DISTANCE_10 1.0,1.30
string VD_SCALE_BY_OBSTACLE_DISTANCE_11 1.1,1.35
string VD_SCALE_BY_OBSTACLE_DISTANCE_12 1.2,1.40
string VD_SCALE_BY_OBSTACLE_DISTANCE_13 1.3,1.45
string VD_SCALE_BY_OBSTACLE_DISTANCE_14 1.4,1.50
string VD_SCALE_BY_OBSTACLE_DISTANCE_15 1.5,1.55
string VD_SCALE_BY_OBSTACLE_DISTANCE_16 1.6,1.60
string VD_SCALE_BY_OBSTACLE_DISTANCE_17 1.7,1.65
string VD_SCALE_BY_OBSTACLE_DISTANCE_18 1.8,1.70

#Scaling for distance from obstacle based on cosine of angle
#between vector to obstacle and direction of motion 
int VD_NUM_AGREEMENT_EFFECTIVE_DISTANCE_FACTOR 5
string VD_AGREEMENT_EFFECTIVE_DISTANCE_FACTOR_0 0.00,2.5
string VD_AGREEMENT_EFFECTIVE_DISTANCE_FACTOR_1 0.25,2.2
string VD_AGREEMENT_EFFECTIVE_DISTANCE_FACTOR_2 0.50,1.7
string VD_AGREEMENT_EFFECTIVE_DISTANCE_FACTOR_3 0.75,1.1
string VD_AGREEMENT_EFFECTIVE_DISTANCE_FACTOR_4 1.00,1.0





# New Feedback class
# these should all be initialized to their tuned value, or auto tuned
# they should also all be positive values except maybe D            


#Gain matrix for ModelFeedback-------------------------------------------------

#Wheels are diagonally oriented. The robot is facing RIGHT.
#Starting from the upper right wheel, going counterclockwise, we number the wheels 1,2,3,4
# 3   2
#  / \
#   R ->
#  \ /
# 4   1
#Sending POSITIVE speeds to all wheels causes the robot to go COUNTERCLOCKWISE

#Each column in the gain matrix specifies what wheel speeds we should contribute for a given desired motion.
# Column 1: Wheel speeds if the robot wants to go RIGHT (+X)
# Column 2: Wheel speeds if the robot wants to go UP (+Y)
# Column 3: Wheel speeds if the robot wants spin COUNTERCLOCKWISE
# Column 4: Wheel speeds if the robot wants RIGHTWARD velocity(+X)
# Column 5: Wheel speeds if the robot wants UPWARD velocity(+Y)
# Column 6: Wheel speeds if the robot wants COUNTERCLOCKWISE angular velocity

#Translation only
# 5,  5,  0,  0.75,  0.75,  0; 
#-5,  5,  0, -0.75,  0.75,  0; 
#-5, -5,  0, -0.75, -0.75,  0; 
# 5, -5,  0,  0.75, -0.75,  0

#Rotation only
# 0, 0, 5, 0, 0, 0.75; 
# 0, 0, 5, 0, 0, 0.75; 
# 0, 0, 5, 0, 0, 0.75; 
# 0, 0, 5, 0, 0, 0.75

#Final version
# 5,  5, 0.2,  0.3,  0.3, 0.75; 
#-5,  5, 0.2, -0.3,  0.3, 0.75; 
#-5, -5, 0.2, -0.3, -0.3, 0.75; 
# 5, -5, 0.2,  0.3, -0.3, 0.75
string GAIN_MATRIX 5,  5, 0.2,  0.3,  0.3, 0.75; -5,  5, 0.2, -0.3,  0.3, 0.75; -5, -5, 0.2, -0.3, -0.3, 0.75; 5, -5, 0.2,  0.3, -0.3, 0.75

#How much we should scale the values in the gain matrix?

#double GAIN_MATRIX_SCALE 20
double GAIN_MATRIX_SCALE 15


#Other stuff-------------------------------------------------

##alpha should be between 0 and 1.


##For X and Y
##Lower voltage
#p = 130
#i = 1
#d= 250


##Higher voltage
#p=100
#i=1
#d=150


double P_X_0 100
#double P_X_0 0
double P_X_1 100
double P_X_2 100
double P_X_3 100
double P_X_4 100

double I_X_0 0
#double I_X_0 0
double I_X_1 0
double I_X_2 0
double I_X_3 0
double I_X_4 0

double D_X_0 10
#double D_X_0 0
double D_X_1 10
double D_X_2 10
double D_X_3 10
double D_X_4 10

double ALPHA_X_0 1
double ALPHA_X_1 1
double ALPHA_X_2 1
double ALPHA_X_3 1
double ALPHA_X_4 1


#double P_Y_0 0
double P_Y_0 100
double P_Y_1 100
double P_Y_2 100
double P_Y_3 100
double P_Y_4 100

#double I_Y_0 0
double I_Y_0 0
double I_Y_1 0
double I_Y_2 0
double I_Y_3 0
double I_Y_4 0

double D_Y_0 10
#double D_Y_0 0
double D_Y_1 10
double D_Y_2 10
double D_Y_3 10
double D_Y_4 10

double ALPHA_Y_0 1
double ALPHA_Y_1 1
double ALPHA_Y_2 1
double ALPHA_Y_3 1
double ALPHA_Y_4 1

double P_THETA_0 100
double P_THETA_1 100
double P_THETA_2 100
double P_THETA_3 100
double P_THETA_4 100

double I_THETA_0 0
#double I_THETA_0 0
double I_THETA_1 0
double I_THETA_2 0
double I_THETA_3 0
double I_THETA_4 0

double D_THETA_0 100
#double D_THETA_0 0
double D_THETA_1 100
double D_THETA_2 100
double D_THETA_3 100
double D_THETA_4 100

double ALPHA_THETA_0 1
double ALPHA_THETA_1 1
double ALPHA_THETA_2 1
double ALPHA_THETA_3 1
double ALPHA_THETA_4 1

int CHARGE_TIME 1000


double DEFAULT_VELOCITY 70

int MAX_STEP 3
int MAX_ACCELERATION 20

double DESIRED_SPEED 60

double P_FWDV_0 0
double P_FWDV_1 0
double P_FWDV_2 0
double P_FWDV_3 0
double P_FWDV_4 0

double I_FWDV_0 0
double I_FWDV_1 0
double I_FWDV_2 0
double I_FWDV_3 0
double I_FWDV_4 0

double D_FWDV_0 0
double D_FWDV_1 0
double D_FWDV_2 0
double D_FWDV_3 0
double D_FWDV_4 0

double ALPHA_FWDV_0 1
double ALPHA_FWDV_1 1
double ALPHA_FWDV_2 1
double ALPHA_FWDV_3 1
double ALPHA_FWDV_4 1

double P_LATV_0 0
double P_LATV_1 0
double P_LATV_2 0
double P_LATV_3 0
double P_LATV_4 0

double I_LATV_0 0
#double I_LATV_0 0
double I_LATV_1 0
double I_LATV_2 0
double I_LATV_3 0
double I_LATV_4 0

double D_LATV_0 0
double D_LATV_1 0
double D_LATV_2 0
double D_LATV_3 0
double D_LATV_4 0

double ALPHA_LATV_0 1
double ALPHA_LATV_1 1
double ALPHA_LATV_2 1
double ALPHA_LATV_3 1
double ALPHA_LATV_4 1

double MOVE_PID_MAX 40
